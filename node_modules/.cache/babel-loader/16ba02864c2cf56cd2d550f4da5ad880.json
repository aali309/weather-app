{"ast":null,"code":"/*import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n//component to render list of cities on search from navbar component\r\n\r\nfunction SearchListComponent(props) {\r\n  const [weatherData, setWeatherData] = useState([]); //state for weather data\r\n  const [wpdata, setWpdata] = useState([]); //state for weather pagination data\r\n  const [pageNumber, setPageNumber] = useState(1); //state for page number , initial value is one\r\n  const [totalPages, setTotalPages] = useState(1); // state for total pages\r\n  const pageSize = 3;\r\n\r\n  let { updateSearchId } = useParams(); //capture search id from navbar component\r\n\r\n  //function to get data from weather api\r\n  const getData = async (cityId) => {\r\n    const res = await axios.get(\r\n      `http://api.openweathermap.org/data/2.5/find?units=metric&q=${cityId}&APPID=baaff88971c49e8746e3c9e3262fc830`\r\n    );\r\n    setWeatherData(res.data.list);\r\n    setWpdata(getPaginatedData(res.data.list, 3, 3));\r\n    setTotalPages(Math.ceil(wpdata.length / pageSize));\r\n  };\r\n\r\n  //function for getting paginated data\r\n  function getPaginatedData(res, size) {\r\n    size = size || 10;\r\n    var pages = Math.ceil(res.length / size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.round(size * (p - 1));\r\n      items.push(res.slice(start, start + size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  //call weather api and set data before rendering dom\r\n  useEffect(() => {\r\n    getData(updateSearchId);\r\n  }, [updateSearchId]);\r\n\r\n  //show data on UI\r\n  const listData = (w, index) => {\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel className=\"Panel\" bsStyle=\"info\" eventKey={w}>\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${w.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {w.name},{w.sys.country}\r\n                  </span>\r\n\r\n                  <p>\r\n                    feels like - {w.main.feels_like}, {w.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${w.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {w.main.temp}&deg;C\r\n                  </span>\r\n                  <br />\r\n                  <button\r\n                    className=\"addbutton\"\r\n                    onClick={(e) => props.addRecentlyViewed(w.id)}\r\n                  >\r\n                    +\r\n                  </button>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div>\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Expected weather from :{\" \"}\r\n                        <span id=\"wind\">{w.main.temp_min}</span> &deg;C\r\n                      </span>{\" \"}\r\n                      to{\" \"}\r\n                      <span>\r\n                        Max: <span id=\"wind\">{w.main.temp_max}</span> &deg;C\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      Humidity - <span id=\"humidity\">{w.main.humidity}</span>%\r\n                      <span>ðŸ’§</span> <span>Pressure : {w.main.pressure} </span>\r\n                      <span>\r\n                        <span>Clouds : {w.weather[0].description} </span>{\" \"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Wind: <span id=\"wind\">{w.wind.speed}</span> m/s\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Geo Location:{\" \"}\r\n                        <span id=\"wind\">\r\n                          {w.coord.lat} , {w.coord.lon}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //function to show number of pagination buttons\r\n  const paginationButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        bsStyle=\"primary\"\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  {\r\n    console.log(weatherData);\r\n  }\r\n  {\r\n    console.log(wpdata);\r\n  }\r\n  {\r\n    console.log(pageNumber);\r\n  }\r\n\r\n  //renders list only if data is present\r\n  if (weatherData.length > 0 && wpdata.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(wpdata[pageNumber - 1]).map(listData)}\r\n        {wpdata.map(paginationButton)}\r\n      </div>\r\n    );\r\n  }\r\n  //if data is not present show alert\r\n  else {\r\n    return (\r\n      <div className=\"alert-danger\">\r\n        <mark>City you entered can't be found!!</mark>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchListComponent; \r\n*/","map":{"version":3,"sources":["/Users/atif/Desktop/web/weatherapp/src/components/SearchListComponent.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/*import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n//component to render list of cities on search from navbar component\r\n\r\nfunction SearchListComponent(props) {\r\n  const [weatherData, setWeatherData] = useState([]); //state for weather data\r\n  const [wpdata, setWpdata] = useState([]); //state for weather pagination data\r\n  const [pageNumber, setPageNumber] = useState(1); //state for page number , initial value is one\r\n  const [totalPages, setTotalPages] = useState(1); // state for total pages\r\n  const pageSize = 3;\r\n\r\n  let { updateSearchId } = useParams(); //capture search id from navbar component\r\n\r\n  //function to get data from weather api\r\n  const getData = async (cityId) => {\r\n    const res = await axios.get(\r\n      `http://api.openweathermap.org/data/2.5/find?units=metric&q=${cityId}&APPID=baaff88971c49e8746e3c9e3262fc830`\r\n    );\r\n    setWeatherData(res.data.list);\r\n    setWpdata(getPaginatedData(res.data.list, 3, 3));\r\n    setTotalPages(Math.ceil(wpdata.length / pageSize));\r\n  };\r\n\r\n  //function for getting paginated data\r\n  function getPaginatedData(res, size) {\r\n    size = size || 10;\r\n    var pages = Math.ceil(res.length / size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.round(size * (p - 1));\r\n      items.push(res.slice(start, start + size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  //call weather api and set data before rendering dom\r\n  useEffect(() => {\r\n    getData(updateSearchId);\r\n  }, [updateSearchId]);\r\n\r\n  //show data on UI\r\n  const listData = (w, index) => {\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel className=\"Panel\" bsStyle=\"info\" eventKey={w}>\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${w.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {w.name},{w.sys.country}\r\n                  </span>\r\n\r\n                  <p>\r\n                    feels like - {w.main.feels_like}, {w.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${w.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {w.main.temp}&deg;C\r\n                  </span>\r\n                  <br />\r\n                  <button\r\n                    className=\"addbutton\"\r\n                    onClick={(e) => props.addRecentlyViewed(w.id)}\r\n                  >\r\n                    +\r\n                  </button>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div>\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Expected weather from :{\" \"}\r\n                        <span id=\"wind\">{w.main.temp_min}</span> &deg;C\r\n                      </span>{\" \"}\r\n                      to{\" \"}\r\n                      <span>\r\n                        Max: <span id=\"wind\">{w.main.temp_max}</span> &deg;C\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      Humidity - <span id=\"humidity\">{w.main.humidity}</span>%\r\n                      <span>ðŸ’§</span> <span>Pressure : {w.main.pressure} </span>\r\n                      <span>\r\n                        <span>Clouds : {w.weather[0].description} </span>{\" \"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Wind: <span id=\"wind\">{w.wind.speed}</span> m/s\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Geo Location:{\" \"}\r\n                        <span id=\"wind\">\r\n                          {w.coord.lat} , {w.coord.lon}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //function to show number of pagination buttons\r\n  const paginationButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        bsStyle=\"primary\"\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  {\r\n    console.log(weatherData);\r\n  }\r\n  {\r\n    console.log(wpdata);\r\n  }\r\n  {\r\n    console.log(pageNumber);\r\n  }\r\n\r\n  //renders list only if data is present\r\n  if (weatherData.length > 0 && wpdata.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(wpdata[pageNumber - 1]).map(listData)}\r\n        {wpdata.map(paginationButton)}\r\n      </div>\r\n    );\r\n  }\r\n  //if data is not present show alert\r\n  else {\r\n    return (\r\n      <div className=\"alert-danger\">\r\n        <mark>City you entered can't be found!!</mark>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchListComponent; \r\n*/\r\n"]},"metadata":{},"sourceType":"module"}