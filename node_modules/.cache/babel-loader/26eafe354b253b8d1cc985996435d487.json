{"ast":null,"code":"var _jsxFileName = \"/Users/atif/Desktop/web/weatherapp/src/components/SearchListComponent.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\"; //import { Button} from \"react-bootstrap\";\n\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\"; //component to render list of cities on search from navbar component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchListComponent(props) {\n  _s();\n\n  const [wdata, setWdata] = useState([]);\n  const [pageDate, setpageDate] = useState([]);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const pageSize = 3;\n  const {\n    updateSearchId\n  } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\n\n  function paginate(res, page_size, max_page_size) {\n    page_size = page_size || 10;\n    max_page_size = max_page_size || 100;\n    page_size = page_size > max_page_size ? max_page_size : page_size;\n    var pages = Math.ceil(res.length / page_size),\n        items = [];\n\n    for (var p = 1; p <= pages; p++) {\n      var start = Math.ceil(page_size * (p - 1));\n      items.push(res.slice(start, start + page_size));\n    }\n\n    return items;\n  }\n\n  useEffect(() => {\n    var current = new Date();\n    var dataStr = \"\";\n    dataStr = \"Date: \" + current.getFullYear() + \"-\" + current.getMonth() + \"-\" + current.getDate() + \", Time: \" + current.getHours() + \":\" + current.getMinutes();\n    setCurrentDate(dataStr);\n\n    function getWeather(cityId) {\n      return new Promise((resolve, reject) => {\n        var req = \"http://api.openweathermap.org/data/2.5/find?q=\" + cityId + \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\n        fetch(req).then(response => response.json()).then(data => {\n          resolve(data);\n        }).catch(error => {\n          console.error(\"Error:\", error);\n          reject();\n        });\n      });\n    }\n\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\n    var strComma = userStr.substr(userStr.length - 3, 1);\n    var url = userStr.split(\",\"); //   getData(url[0]);\n\n    getWeather(url[0]).then(data => {\n      // console.log(data);\n      var tempArray = [];\n\n      if (strComma == \",\") {\n        var countryCode = url[1];\n\n        for (var i = 0; i < data.list.length; i++) {\n          if (data.list[i].sys.country == countryCode) {\n            tempArray.push(data.list[i]);\n            setWdata(tempArray);\n            setpageDate(paginate(tempArray, 3, 3));\n            setTotalPages(tempArray.length / pageSize + 1);\n          }\n        }\n      } else {\n        setWdata(data.list);\n        setpageDate(paginate(data.list, 3, 3));\n        setTotalPages(data.list.length / pageSize + 1);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [updateSearchId]);\n\n  const accordian = (weahterRecord, index) => {\n    console.log(weahterRecord);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PanelGroup, {\n        accordion: true,\n        id: \"accordion-uncontrolled-example\",\n        defaultActiveKey: \"2\",\n        children: /*#__PURE__*/_jsxDEV(Panel, {\n          onClick: e => props.addRecentlyViewed(weahterRecord),\n          eventKey: weahterRecord,\n          children: [/*#__PURE__*/_jsxDEV(Panel.Heading, {\n            children: /*#__PURE__*/_jsxDEV(Panel.Title, {\n              toggle: true,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [weahterRecord.name, \", \", weahterRecord.sys.country]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"feels like - \", weahterRecord.main.feels_like, \",\", \" \", weahterRecord.weather[0].description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 127,\n                    columnNumber: 21\n                  }, this), weahterRecord.main.temp, \"\\xB0C\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Panel.Body, {\n            collapsible: true,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"background\",\n              children: /*#__PURE__*/_jsxDEV(\"section\", {\n                id: \"itroBackground\",\n                className: \"intro\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"inner\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"content\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"weather-app\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"left\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          id: \"toggleCelsius\",\n                          className: \"temperature-celsius\",\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            id: \"temperatureCelsius\",\n                            children: [weahterRecord.main.temp, \"\\xB0C\"]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 146,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 142,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"location\",\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            id: \"loc\",\n                            children: [weahterRecord.name, \", \", weahterRecord.sys.country]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 151,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 150,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 155,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"day\",\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            id: \"date\",\n                            children: currentDate\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 157,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 156,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"day\",\n                          children: /*#__PURE__*/_jsxDEV(\"span\", {\n                            id: \"weekday\",\n                            children: daylist[new Date().getDay()]\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 160,\n                            columnNumber: 29\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 159,\n                          columnNumber: 27\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 141,\n                        columnNumber: 25\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"right\",\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"top\",\n                          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                            id: \"icon\",\n                            width: \"75px\",\n                            src: `http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 167,\n                            columnNumber: 29\n                          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                            id: \"description\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 172,\n                            columnNumber: 29\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 166,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          className: \"bottom\",\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"humidity\",\n                            children: /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: [\"Humidity:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                                id: \"humidity\",\n                                children: weahterRecord.main.humidity\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 178,\n                                columnNumber: 33\n                              }, this), \"%\"]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 176,\n                              columnNumber: 31\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 175,\n                            columnNumber: 29\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"wind\",\n                            children: /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: [\"Wind:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                                id: \"wind\",\n                                children: weahterRecord.wind.speed\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 187,\n                                columnNumber: 33\n                              }, this), \" \", \"m/s\"]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 185,\n                              columnNumber: 31\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 184,\n                            columnNumber: 29\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"wind\",\n                            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                              children: [\"Min:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                                id: \"mintemp\",\n                                children: weahterRecord.main.temp_min\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 196,\n                                columnNumber: 33\n                              }, this), \" \", \"\\xB0C\"]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 194,\n                              columnNumber: 31\n                            }, this), \" \", \"/\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: [\"Max:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                                id: \"mmaxtemp\",\n                                children: weahterRecord.main.temp_max\n                              }, void 0, false, {\n                                fileName: _jsxFileName,\n                                lineNumber: 204,\n                                columnNumber: 33\n                              }, this), \" \", \"\\xB0C\"]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 202,\n                              columnNumber: 31\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 193,\n                            columnNumber: 29\n                          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                            className: \"Geo\",\n                            children: /*#__PURE__*/_jsxDEV(\"span\", {\n                              children: [\"Geo Location:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                                id: \"GeoLoc\",\n                                children: [weahterRecord.coord.lat, \" ,\", \" \", weahterRecord.coord.lon]\n                              }, void 0, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 213,\n                                columnNumber: 33\n                              }, this)]\n                            }, void 0, true, {\n                              fileName: _jsxFileName,\n                              lineNumber: 211,\n                              columnNumber: 31\n                            }, this)\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 210,\n                            columnNumber: 29\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 174,\n                          columnNumber: 27\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 165,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 140,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 139,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  };\n\n  const pageButton = (p, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      active: index + 1 === pageNumber,\n      onClick: e => {\n        setPageNumber(index + 1);\n      },\n      children: [index + 1, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  };\n\n  if (wdata.length > 0 && pageDate.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Array.from(pageDate[pageNumber - 1]).map(accordian), pageDate.map(pageButton)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"API Failed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(SearchListComponent, \"dlvjwZ/GzHwhMXhuMOJB4pUK87Q=\", false, function () {\n  return [useParams];\n});\n\n_c = SearchListComponent;\nexport default SearchListComponent;\n/*\r\n//import axios from 'axios'\r\nimport { useState, useEffect } from \"react\";\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\n\r\nimport { PanelGroup, Panel } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Alert, Pagination } from \"react-bootstrap\";\r\n\r\nvar daylist = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday \",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nfunction SearchListComponent(props) {\r\n  const [wdata, setWdata] = useState([]);\r\n  const [pageDate, setpageDate] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const pageSize = 3;\r\n\r\n  const { updateSearchId } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\r\n\r\n  function paginate(res, page_size, max_page_size) {\r\n    page_size = page_size || 10;\r\n    max_page_size = max_page_size || 100;\r\n    page_size = page_size > max_page_size ? max_page_size : page_size;\r\n    var pages = Math.ceil(res.length / page_size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(page_size * (p - 1));\r\n      items.push(res.slice(start, start + page_size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var current = new Date();\r\n\r\n    var dataStr = \"\";\r\n    dataStr =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"-\" +\r\n      current.getMonth() +\r\n      \"-\" +\r\n      current.getDate() +\r\n      \", Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(dataStr);\r\n    function getWeather(cityId) {\r\n      return new Promise((resolve, reject) => {\r\n        var req =\r\n          \"http://api.openweathermap.org/data/2.5/find?q=\" +\r\n          cityId +\r\n          \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\r\n\r\n        fetch(req)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            resolve(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            reject();\r\n          });\r\n      });\r\n    }\r\n\r\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\r\n    var strComma = userStr.substr(userStr.length - 3, 1);\r\n    var url = userStr.split(\",\");\r\n    //   getData(url[0]);\r\n    getWeather(url[0])\r\n      .then((data) => {\r\n        // console.log(data);\r\n        var tempArray = [];\r\n        if (strComma == \",\") {\r\n          var countryCode = url[1];\r\n          for (var i = 0; i < data.list.length; i++) {\r\n            if (data.list[i].sys.country == countryCode) {\r\n              tempArray.push(data.list[i]);\r\n\r\n              setWdata(tempArray);\r\n              setpageDate(paginate(tempArray, 3, 3));\r\n              setTotalPages(tempArray.length / pageSize + 1);\r\n            }\r\n          }\r\n        } else {\r\n          setWdata(data.list);\r\n\r\n          setpageDate(paginate(data.list, 3, 3));\r\n          setTotalPages(data.list.length / pageSize + 1);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [updateSearchId]);\r\n\r\n  const accordian = (weahterRecord, index) => {\r\n    console.log(weahterRecord);\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel\r\n            onClick={(e) => props.addRecentlyViewed(weahterRecord)}\r\n            eventKey={weahterRecord}\r\n          >\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {weahterRecord.name}, {weahterRecord.sys.country}\r\n                  </span>\r\n                  <p>\r\n                    feels like - {weahterRecord.main.feels_like},{\" \"}\r\n                    {weahterRecord.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {weahterRecord.main.temp}&deg;C\r\n                  </span>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div id=\"background\">\r\n                <section id=\"itroBackground\" className=\"intro\">\r\n                  <div className=\"inner\">\r\n                    <div className=\"content\">\r\n                      <div className=\"weather-app\">\r\n                        <div className=\"left\">\r\n                          <div\r\n                            id=\"toggleCelsius\"\r\n                            className=\"temperature-celsius\"\r\n                          >\r\n                            <span id=\"temperatureCelsius\">\r\n                              {weahterRecord.main.temp}&deg;C\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"location\">\r\n                            <span id=\"loc\">\r\n                              {weahterRecord.name}, {weahterRecord.sys.country}\r\n                            </span>\r\n                          </div>\r\n                          <br />\r\n                          <div className=\"day\">\r\n                            <span id=\"date\">{currentDate}</span>\r\n                          </div>\r\n                          <div className=\"day\">\r\n                            <span id=\"weekday\">\r\n                              {daylist[new Date().getDay()]}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <div className=\"top\">\r\n                            <img\r\n                              id=\"icon\"\r\n                              width=\"75px\"\r\n                              src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                            />\r\n                            <p id=\"description\"></p>\r\n                          </div>\r\n                          <div className=\"bottom\">\r\n                            <div className=\"humidity\">\r\n                              <span>\r\n                                Humidity:\r\n                                <span id=\"humidity\">\r\n                                  {weahterRecord.main.humidity}\r\n                                </span>\r\n                                %\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Wind:{\" \"}\r\n                                <span id=\"wind\">\r\n                                  {weahterRecord.wind.speed}\r\n                                </span>{\" \"}\r\n                                m/s\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Min:{\" \"}\r\n                                <span id=\"mintemp\">\r\n                                  {weahterRecord.main.temp_min}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>{\" \"}\r\n                              /{\" \"}\r\n                              <span>\r\n                                Max:{\" \"}\r\n                                <span id=\"mmaxtemp\">\r\n                                  {weahterRecord.main.temp_max}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"Geo\">\r\n                              <span>\r\n                                Geo Location:{\" \"}\r\n                                <span id=\"GeoLoc\">\r\n                                  {weahterRecord.coord.lat} ,{\" \"}\r\n                                  {weahterRecord.coord.lon}\r\n                                </span>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n  const pageButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  if (wdata.length > 0 && pageDate.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(pageDate[pageNumber - 1]).map(accordian)}\r\n        {pageDate.map(pageButton)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>API Failed</div>;\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchListComponent\");","map":{"version":3,"sources":["/Users/atif/Desktop/web/weatherapp/src/components/SearchListComponent.js"],"names":["axios","useState","useEffect","PanelGroup","Panel","Button","React","useParams","SearchListComponent","props","wdata","setWdata","pageDate","setpageDate","pageNumber","setPageNumber","totalPages","setTotalPages","currentDate","setCurrentDate","pageSize","updateSearchId","paginate","res","page_size","max_page_size","pages","Math","ceil","length","items","p","start","push","slice","current","Date","dataStr","getFullYear","getMonth","getDate","getHours","getMinutes","getWeather","cityId","Promise","resolve","reject","req","fetch","then","response","json","data","catch","error","console","userStr","replace","toUpperCase","strComma","substr","url","split","tempArray","countryCode","i","list","sys","country","err","log","accordian","weahterRecord","index","e","addRecentlyViewed","toLowerCase","name","main","feels_like","weather","description","icon","temp","daylist","getDay","humidity","wind","speed","temp_min","temp_max","coord","lat","lon","pageButton","Array","from","map"],"mappings":"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":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n//component to render list of cities on search from navbar component\r\n\r\nfunction SearchListComponent(props) {\r\n  const [wdata, setWdata] = useState([]);\r\n  const [pageDate, setpageDate] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const pageSize = 3;\r\n\r\n  const { updateSearchId } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\r\n\r\n  function paginate(res, page_size, max_page_size) {\r\n    page_size = page_size || 10;\r\n    max_page_size = max_page_size || 100;\r\n    page_size = page_size > max_page_size ? max_page_size : page_size;\r\n    var pages = Math.ceil(res.length / page_size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(page_size * (p - 1));\r\n      items.push(res.slice(start, start + page_size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var current = new Date();\r\n\r\n    var dataStr = \"\";\r\n    dataStr =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"-\" +\r\n      current.getMonth() +\r\n      \"-\" +\r\n      current.getDate() +\r\n      \", Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(dataStr);\r\n    function getWeather(cityId) {\r\n      return new Promise((resolve, reject) => {\r\n        var req =\r\n          \"http://api.openweathermap.org/data/2.5/find?q=\" +\r\n          cityId +\r\n          \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\r\n\r\n        fetch(req)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            resolve(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            reject();\r\n          });\r\n      });\r\n    }\r\n\r\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\r\n    var strComma = userStr.substr(userStr.length - 3, 1);\r\n    var url = userStr.split(\",\");\r\n    //   getData(url[0]);\r\n    getWeather(url[0])\r\n      .then((data) => {\r\n        // console.log(data);\r\n        var tempArray = [];\r\n        if (strComma == \",\") {\r\n          var countryCode = url[1];\r\n          for (var i = 0; i < data.list.length; i++) {\r\n            if (data.list[i].sys.country == countryCode) {\r\n              tempArray.push(data.list[i]);\r\n\r\n              setWdata(tempArray);\r\n              setpageDate(paginate(tempArray, 3, 3));\r\n              setTotalPages(tempArray.length / pageSize + 1);\r\n            }\r\n          }\r\n        } else {\r\n          setWdata(data.list);\r\n\r\n          setpageDate(paginate(data.list, 3, 3));\r\n          setTotalPages(data.list.length / pageSize + 1);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [updateSearchId]);\r\n\r\n  const accordian = (weahterRecord, index) => {\r\n    console.log(weahterRecord);\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel\r\n            onClick={(e) => props.addRecentlyViewed(weahterRecord)}\r\n            eventKey={weahterRecord}\r\n          >\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {weahterRecord.name}, {weahterRecord.sys.country}\r\n                  </span>\r\n                  <p>\r\n                    feels like - {weahterRecord.main.feels_like},{\" \"}\r\n                    {weahterRecord.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {weahterRecord.main.temp}&deg;C\r\n                  </span>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div id=\"background\">\r\n                <section id=\"itroBackground\" className=\"intro\">\r\n                  <div className=\"inner\">\r\n                    <div className=\"content\">\r\n                      <div className=\"weather-app\">\r\n                        <div className=\"left\">\r\n                          <div\r\n                            id=\"toggleCelsius\"\r\n                            className=\"temperature-celsius\"\r\n                          >\r\n                            <span id=\"temperatureCelsius\">\r\n                              {weahterRecord.main.temp}&deg;C\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"location\">\r\n                            <span id=\"loc\">\r\n                              {weahterRecord.name}, {weahterRecord.sys.country}\r\n                            </span>\r\n                          </div>\r\n                          <br />\r\n                          <div className=\"day\">\r\n                            <span id=\"date\">{currentDate}</span>\r\n                          </div>\r\n                          <div className=\"day\">\r\n                            <span id=\"weekday\">\r\n                              {daylist[new Date().getDay()]}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <div className=\"top\">\r\n                            <img\r\n                              id=\"icon\"\r\n                              width=\"75px\"\r\n                              src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                            />\r\n                            <p id=\"description\"></p>\r\n                          </div>\r\n                          <div className=\"bottom\">\r\n                            <div className=\"humidity\">\r\n                              <span>\r\n                                Humidity:\r\n                                <span id=\"humidity\">\r\n                                  {weahterRecord.main.humidity}\r\n                                </span>\r\n                                %\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Wind:{\" \"}\r\n                                <span id=\"wind\">\r\n                                  {weahterRecord.wind.speed}\r\n                                </span>{\" \"}\r\n                                m/s\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Min:{\" \"}\r\n                                <span id=\"mintemp\">\r\n                                  {weahterRecord.main.temp_min}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>{\" \"}\r\n                              /{\" \"}\r\n                              <span>\r\n                                Max:{\" \"}\r\n                                <span id=\"mmaxtemp\">\r\n                                  {weahterRecord.main.temp_max}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"Geo\">\r\n                              <span>\r\n                                Geo Location:{\" \"}\r\n                                <span id=\"GeoLoc\">\r\n                                  {weahterRecord.coord.lat} ,{\" \"}\r\n                                  {weahterRecord.coord.lon}\r\n                                </span>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n  const pageButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  if (wdata.length > 0 && pageDate.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(pageDate[pageNumber - 1]).map(accordian)}\r\n        {pageDate.map(pageButton)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>API Failed</div>;\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n/*\r\n//import axios from 'axios'\r\nimport { useState, useEffect } from \"react\";\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\n\r\nimport { PanelGroup, Panel } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Alert, Pagination } from \"react-bootstrap\";\r\n\r\nvar daylist = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday \",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nfunction SearchListComponent(props) {\r\n  const [wdata, setWdata] = useState([]);\r\n  const [pageDate, setpageDate] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const pageSize = 3;\r\n\r\n  const { updateSearchId } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\r\n\r\n  function paginate(res, page_size, max_page_size) {\r\n    page_size = page_size || 10;\r\n    max_page_size = max_page_size || 100;\r\n    page_size = page_size > max_page_size ? max_page_size : page_size;\r\n    var pages = Math.ceil(res.length / page_size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(page_size * (p - 1));\r\n      items.push(res.slice(start, start + page_size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var current = new Date();\r\n\r\n    var dataStr = \"\";\r\n    dataStr =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"-\" +\r\n      current.getMonth() +\r\n      \"-\" +\r\n      current.getDate() +\r\n      \", Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(dataStr);\r\n    function getWeather(cityId) {\r\n      return new Promise((resolve, reject) => {\r\n        var req =\r\n          \"http://api.openweathermap.org/data/2.5/find?q=\" +\r\n          cityId +\r\n          \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\r\n\r\n        fetch(req)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            resolve(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            reject();\r\n          });\r\n      });\r\n    }\r\n\r\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\r\n    var strComma = userStr.substr(userStr.length - 3, 1);\r\n    var url = userStr.split(\",\");\r\n    //   getData(url[0]);\r\n    getWeather(url[0])\r\n      .then((data) => {\r\n        // console.log(data);\r\n        var tempArray = [];\r\n        if (strComma == \",\") {\r\n          var countryCode = url[1];\r\n          for (var i = 0; i < data.list.length; i++) {\r\n            if (data.list[i].sys.country == countryCode) {\r\n              tempArray.push(data.list[i]);\r\n\r\n              setWdata(tempArray);\r\n              setpageDate(paginate(tempArray, 3, 3));\r\n              setTotalPages(tempArray.length / pageSize + 1);\r\n            }\r\n          }\r\n        } else {\r\n          setWdata(data.list);\r\n\r\n          setpageDate(paginate(data.list, 3, 3));\r\n          setTotalPages(data.list.length / pageSize + 1);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [updateSearchId]);\r\n\r\n  const accordian = (weahterRecord, index) => {\r\n    console.log(weahterRecord);\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel\r\n            onClick={(e) => props.addRecentlyViewed(weahterRecord)}\r\n            eventKey={weahterRecord}\r\n          >\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {weahterRecord.name}, {weahterRecord.sys.country}\r\n                  </span>\r\n                  <p>\r\n                    feels like - {weahterRecord.main.feels_like},{\" \"}\r\n                    {weahterRecord.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {weahterRecord.main.temp}&deg;C\r\n                  </span>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div id=\"background\">\r\n                <section id=\"itroBackground\" className=\"intro\">\r\n                  <div className=\"inner\">\r\n                    <div className=\"content\">\r\n                      <div className=\"weather-app\">\r\n                        <div className=\"left\">\r\n                          <div\r\n                            id=\"toggleCelsius\"\r\n                            className=\"temperature-celsius\"\r\n                          >\r\n                            <span id=\"temperatureCelsius\">\r\n                              {weahterRecord.main.temp}&deg;C\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"location\">\r\n                            <span id=\"loc\">\r\n                              {weahterRecord.name}, {weahterRecord.sys.country}\r\n                            </span>\r\n                          </div>\r\n                          <br />\r\n                          <div className=\"day\">\r\n                            <span id=\"date\">{currentDate}</span>\r\n                          </div>\r\n                          <div className=\"day\">\r\n                            <span id=\"weekday\">\r\n                              {daylist[new Date().getDay()]}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <div className=\"top\">\r\n                            <img\r\n                              id=\"icon\"\r\n                              width=\"75px\"\r\n                              src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                            />\r\n                            <p id=\"description\"></p>\r\n                          </div>\r\n                          <div className=\"bottom\">\r\n                            <div className=\"humidity\">\r\n                              <span>\r\n                                Humidity:\r\n                                <span id=\"humidity\">\r\n                                  {weahterRecord.main.humidity}\r\n                                </span>\r\n                                %\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Wind:{\" \"}\r\n                                <span id=\"wind\">\r\n                                  {weahterRecord.wind.speed}\r\n                                </span>{\" \"}\r\n                                m/s\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Min:{\" \"}\r\n                                <span id=\"mintemp\">\r\n                                  {weahterRecord.main.temp_min}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>{\" \"}\r\n                              /{\" \"}\r\n                              <span>\r\n                                Max:{\" \"}\r\n                                <span id=\"mmaxtemp\">\r\n                                  {weahterRecord.main.temp_max}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"Geo\">\r\n                              <span>\r\n                                Geo Location:{\" \"}\r\n                                <span id=\"GeoLoc\">\r\n                                  {weahterRecord.coord.lat} ,{\" \"}\r\n                                  {weahterRecord.coord.lon}\r\n                                </span>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n  const pageButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  if (wdata.length > 0 && pageDate.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(pageDate[pageNumber - 1]).map(accordian)}\r\n        {pageDate.map(pageButton)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>API Failed</div>;\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}