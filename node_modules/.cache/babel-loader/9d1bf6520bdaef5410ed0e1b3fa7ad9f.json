{"ast":null,"code":"var _jsxFileName = \"/Users/atif/Desktop/web/weatherapp/src/components/SearchListComponent.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState, useEffect } from \"react\"; //import { Button} from \"react-bootstrap\";\n\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\"; //component to render list of cities on search from navbar component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchListComponent(props) {\n  _s();\n\n  const [weatherData, setWeatherData] = useState([]); //state for weather data\n\n  const [wpdata, setWpdata] = useState([]); //state for weather pagination data\n\n  const [pageNumber, setPageNumber] = useState(1); //state for page number , initial value is one\n\n  const [totalPages, setTotalPages] = useState(1); // state for total pages\n\n  var daylist = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday \", \"Thursday\", \"Friday\", \"Saturday\"];\n  const [currentDate, setCurrentDate] = useState(\"\"); //state for setting date\n\n  const pageSize = 3;\n  let {\n    updateSearchId\n  } = useParams(); //capture search id from navbar component\n  //function for getting paginated data\n\n  function getPaginatedData(res, size, max) {\n    size = size || 10;\n    max = max || 100;\n    size = size > max ? max : size;\n    var pages = Math.ceil(res.length / size),\n        items = [];\n\n    for (var p = 1; p <= pages; p++) {\n      var start = Math.ceil(size * (p - 1));\n      items.push(res.slice(start, start + size));\n    }\n\n    return items;\n  } //function to get data from weather api\n\n\n  const getData = async cityId => {\n    const res = await axios.get(`http://api.openweathermap.org/data/2.5/find?units=metric&q=${cityId}&APPID=baaff88971c49e8746e3c9e3262fc830`);\n    setWeatherData(res.data.list);\n    setWpdata(getPaginatedData(res.data.list, 3, 3));\n    setTotalPages(Math.ceil(wpdata.length / pageSize));\n  }; //call weather api and set data before rendering dom\n\n\n  useEffect(() => {\n    var current = new Date();\n    var date = \"\";\n    var date = \"Date: \" + current.getFullYear() + \"/\" + current.getMonth() + \"/\" + current.getDate() + \"...Time: \" + current.getHours() + \":\" + current.getMinutes();\n    setCurrentDate(date);\n    getData(updateSearchId);\n  }, [updateSearchId]); //show data on UI\n\n  const listData = (w, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PanelGroup, {\n        accordion: true,\n        id: \"accordion-uncontrolled-example\",\n        defaultActiveKey: \"2\",\n        children: /*#__PURE__*/_jsxDEV(Panel, {\n          className: \"Panel\",\n          bsStyle: \"info\",\n          eventKey: w,\n          children: [/*#__PURE__*/_jsxDEV(Panel.Heading, {\n            children: /*#__PURE__*/_jsxDEV(Panel.Title, {\n              toggle: true,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: `http://openweathermap.org/images/flags/${w.sys.country.toLowerCase()}.png`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \" \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [w.name, \",\", w.sys.country]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [\"feels like - \", w.main.feels_like, \", \", w.weather[0].description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `http://openweathermap.org/img/wn/${w.weather[0].icon}@2x.png`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 21\n                  }, this), w.main.temp, \"\\xB0C\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"addbutton\",\n                  onClick: e => props.addRecentlyViewed(w.id),\n                  children: \"+\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Panel.Body, {\n            collapsible: true,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                id: \"customers\",\n                children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Expected weather from :\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        id: \"wind\",\n                        children: w.main.temp_min\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 119,\n                        columnNumber: 25\n                      }, this), \" \\xB0C\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 23\n                    }, this), \" \", \"to\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Max: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        id: \"wind\",\n                        children: w.main.temp_max\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 123,\n                        columnNumber: 30\n                      }, this), \" \\xB0C\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"date\",\n                      children: currentDate\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"dayoftheweek\",\n                      children: daylist[new Date().getDay()]\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 133,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [\"Humidity - \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      id: \"humidity\",\n                      children: w.main.humidity\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 141,\n                      columnNumber: 34\n                    }, this), \"%\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"\\uD83D\\uDCA7\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 23\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Pressure : \", w.main.pressure, \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 142,\n                      columnNumber: 39\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        children: [\"Clouds : \", w.weather[0].description, \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 144,\n                        columnNumber: 25\n                      }, this), \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 140,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Wind: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        id: \"wind\",\n                        children: w.wind.speed\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 151,\n                        columnNumber: 31\n                      }, this), \" m/s\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 150,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: [\"Geo Location:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                        id: \"wind\",\n                        children: [w.coord.lat, \" , \", w.coord.lon]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 159,\n                        columnNumber: 25\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 157,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }; //function to show number of pagination buttons\n\n\n  const paginationButton = (p, index) => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      bsStyle: \"primary\",\n      active: index + 1 === pageNumber,\n      onClick: e => {\n        setPageNumber(index + 1);\n      },\n      children: [index + 1, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this);\n  };\n\n  {\n    console.log(weatherData);\n  }\n  {\n    console.log(wpdata);\n  }\n  {\n    console.log(pageNumber);\n  } //renders list only if data is present\n\n  if (weatherData.length > 0 && wpdata.length > 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Array.from(wpdata[pageNumber - 1]).map(listData), wpdata.map(paginationButton)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  } //if data is not present show alert\n  else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert-danger\",\n        children: /*#__PURE__*/_jsxDEV(\"mark\", {\n          children: \"City you entered can't be found!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this);\n    }\n}\n\n_s(SearchListComponent, \"EGAddUyzklBhl5WnuLRZX3H/U9w=\", false, function () {\n  return [useParams];\n});\n\n_c = SearchListComponent;\nexport default SearchListComponent;\n/*\r\n//import axios from 'axios'\r\nimport { useState, useEffect } from \"react\";\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\n\r\nimport { PanelGroup, Panel } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Alert, Pagination } from \"react-bootstrap\";\r\n\r\nvar daylist = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday \",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nfunction SearchListComponent(props) {\r\n  const [wdata, setWdata] = useState([]);\r\n  const [pageDate, setpageDate] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const pageSize = 3;\r\n\r\n  const { updateSearchId } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\r\n\r\n  function paginate(res, page_size, max_page_size) {\r\n    page_size = page_size || 10;\r\n    max_page_size = max_page_size || 100;\r\n    page_size = page_size > max_page_size ? max_page_size : page_size;\r\n    var pages = Math.ceil(res.length / page_size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(page_size * (p - 1));\r\n      items.push(res.slice(start, start + page_size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var current = new Date();\r\n\r\n    var dataStr = \"\";\r\n    dataStr =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"-\" +\r\n      current.getMonth() +\r\n      \"-\" +\r\n      current.getDate() +\r\n      \", Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(dataStr);\r\n    function getWeather(cityId) {\r\n      return new Promise((resolve, reject) => {\r\n        var req =\r\n          \"http://api.openweathermap.org/data/2.5/find?q=\" +\r\n          cityId +\r\n          \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\r\n\r\n        fetch(req)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            resolve(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            reject();\r\n          });\r\n      });\r\n    }\r\n\r\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\r\n    var strComma = userStr.substr(userStr.length - 3, 1);\r\n    var url = userStr.split(\",\");\r\n    //   getData(url[0]);\r\n    getWeather(url[0])\r\n      .then((data) => {\r\n        // console.log(data);\r\n        var tempArray = [];\r\n        if (strComma == \",\") {\r\n          var countryCode = url[1];\r\n          for (var i = 0; i < data.list.length; i++) {\r\n            if (data.list[i].sys.country == countryCode) {\r\n              tempArray.push(data.list[i]);\r\n\r\n              setWdata(tempArray);\r\n              setpageDate(paginate(tempArray, 3, 3));\r\n              setTotalPages(tempArray.length / pageSize + 1);\r\n            }\r\n          }\r\n        } else {\r\n          setWdata(data.list);\r\n\r\n          setpageDate(paginate(data.list, 3, 3));\r\n          setTotalPages(data.list.length / pageSize + 1);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [updateSearchId]);\r\n\r\n  const accordian = (weahterRecord, index) => {\r\n    console.log(weahterRecord);\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel\r\n            onClick={(e) => props.addRecentlyViewed(weahterRecord)}\r\n            eventKey={weahterRecord}\r\n          >\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {weahterRecord.name}, {weahterRecord.sys.country}\r\n                  </span>\r\n                  <p>\r\n                    feels like - {weahterRecord.main.feels_like},{\" \"}\r\n                    {weahterRecord.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {weahterRecord.main.temp}&deg;C\r\n                  </span>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div id=\"background\">\r\n                <section id=\"itroBackground\" className=\"intro\">\r\n                  <div className=\"inner\">\r\n                    <div className=\"content\">\r\n                      <div className=\"weather-app\">\r\n                        <div className=\"left\">\r\n                          <div\r\n                            id=\"toggleCelsius\"\r\n                            className=\"temperature-celsius\"\r\n                          >\r\n                            <span id=\"temperatureCelsius\">\r\n                              {weahterRecord.main.temp}&deg;C\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"location\">\r\n                            <span id=\"loc\">\r\n                              {weahterRecord.name}, {weahterRecord.sys.country}\r\n                            </span>\r\n                          </div>\r\n                          <br />\r\n                          <div className=\"day\">\r\n                            <span id=\"date\">{currentDate}</span>\r\n                          </div>\r\n                          <div className=\"day\">\r\n                            <span id=\"weekday\">\r\n                              {daylist[new Date().getDay()]}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <div className=\"top\">\r\n                            <img\r\n                              id=\"icon\"\r\n                              width=\"75px\"\r\n                              src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                            />\r\n                            <p id=\"description\"></p>\r\n                          </div>\r\n                          <div className=\"bottom\">\r\n                            <div className=\"humidity\">\r\n                              <span>\r\n                                Humidity:\r\n                                <span id=\"humidity\">\r\n                                  {weahterRecord.main.humidity}\r\n                                </span>\r\n                                %\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Wind:{\" \"}\r\n                                <span id=\"wind\">\r\n                                  {weahterRecord.wind.speed}\r\n                                </span>{\" \"}\r\n                                m/s\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Min:{\" \"}\r\n                                <span id=\"mintemp\">\r\n                                  {weahterRecord.main.temp_min}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>{\" \"}\r\n                              /{\" \"}\r\n                              <span>\r\n                                Max:{\" \"}\r\n                                <span id=\"mmaxtemp\">\r\n                                  {weahterRecord.main.temp_max}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"Geo\">\r\n                              <span>\r\n                                Geo Location:{\" \"}\r\n                                <span id=\"GeoLoc\">\r\n                                  {weahterRecord.coord.lat} ,{\" \"}\r\n                                  {weahterRecord.coord.lon}\r\n                                </span>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n  const pageButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  if (wdata.length > 0 && pageDate.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(pageDate[pageNumber - 1]).map(accordian)}\r\n        {pageDate.map(pageButton)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>API Failed</div>;\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchListComponent\");","map":{"version":3,"sources":["/Users/atif/Desktop/web/weatherapp/src/components/SearchListComponent.js"],"names":["axios","useState","useEffect","PanelGroup","Panel","Button","React","useParams","SearchListComponent","props","weatherData","setWeatherData","wpdata","setWpdata","pageNumber","setPageNumber","totalPages","setTotalPages","daylist","currentDate","setCurrentDate","pageSize","updateSearchId","getPaginatedData","res","size","max","pages","Math","ceil","length","items","p","start","push","slice","getData","cityId","get","data","list","current","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","listData","w","index","sys","country","toLowerCase","name","main","feels_like","weather","description","icon","temp","e","addRecentlyViewed","id","temp_min","temp_max","getDay","humidity","pressure","wind","speed","coord","lat","lon","paginationButton","console","log","Array","from","map"],"mappings":"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":["import axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n//import { Button} from \"react-bootstrap\";\r\nimport { PanelGroup, Panel, Button } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n//component to render list of cities on search from navbar component\r\n\r\nfunction SearchListComponent(props) {\r\n  const [weatherData, setWeatherData] = useState([]); //state for weather data\r\n  const [wpdata, setWpdata] = useState([]); //state for weather pagination data\r\n  const [pageNumber, setPageNumber] = useState(1); //state for page number , initial value is one\r\n  const [totalPages, setTotalPages] = useState(1); // state for total pages\r\n  var daylist = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday \",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  const [currentDate, setCurrentDate] = useState(\"\"); //state for setting date\r\n  const pageSize = 3;\r\n\r\n  let { updateSearchId } = useParams(); //capture search id from navbar component\r\n\r\n  //function for getting paginated data\r\n  function getPaginatedData(res, size, max) {\r\n    size = size || 10;\r\n    max = max || 100;\r\n    size = size > max ? max : size;\r\n    var pages = Math.ceil(res.length / size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(size * (p - 1));\r\n      items.push(res.slice(start, start + size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  //function to get data from weather api\r\n  const getData = async (cityId) => {\r\n    const res = await axios.get(\r\n      `http://api.openweathermap.org/data/2.5/find?units=metric&q=${cityId}&APPID=baaff88971c49e8746e3c9e3262fc830`\r\n    );\r\n    setWeatherData(res.data.list);\r\n    setWpdata(getPaginatedData(res.data.list, 3, 3));\r\n    setTotalPages(Math.ceil(wpdata.length / pageSize));\r\n  };\r\n\r\n  //call weather api and set data before rendering dom\r\n  useEffect(() => {\r\n    var current = new Date();\r\n    var date = \"\";\r\n    var date =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"/\" +\r\n      current.getMonth() +\r\n      \"/\" +\r\n      current.getDate() +\r\n      \"...Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(date);\r\n    getData(updateSearchId);\r\n  }, [updateSearchId]);\r\n\r\n  //show data on UI\r\n  const listData = (w, index) => {\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel className=\"Panel\" bsStyle=\"info\" eventKey={w}>\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${w.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {w.name},{w.sys.country}\r\n                  </span>\r\n\r\n                  <p>\r\n                    feels like - {w.main.feels_like}, {w.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${w.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {w.main.temp}&deg;C\r\n                  </span>\r\n                  <br />\r\n                  <button\r\n                    className=\"addbutton\"\r\n                    onClick={(e) => props.addRecentlyViewed(w.id)}\r\n                  >\r\n                    +\r\n                  </button>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div>\r\n                <table id=\"customers\">\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Expected weather from :{\" \"}\r\n                        <span id=\"wind\">{w.main.temp_min}</span> &deg;C\r\n                      </span>{\" \"}\r\n                      to{\" \"}\r\n                      <span>\r\n                        Max: <span id=\"wind\">{w.main.temp_max}</span> &deg;C\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span id=\"date\">{currentDate}</span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span id=\"dayoftheweek\">\r\n                        {daylist[new Date().getDay()]}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      Humidity - <span id=\"humidity\">{w.main.humidity}</span>%\r\n                      <span>💧</span> <span>Pressure : {w.main.pressure} </span>\r\n                      <span>\r\n                        <span>Clouds : {w.weather[0].description} </span>{\" \"}\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Wind: <span id=\"wind\">{w.wind.speed}</span> m/s\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                  <tr>\r\n                    <td>\r\n                      <span>\r\n                        Geo Location:{\" \"}\r\n                        <span id=\"wind\">\r\n                          {w.coord.lat} , {w.coord.lon}\r\n                        </span>\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //function to show number of pagination buttons\r\n  const paginationButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        bsStyle=\"primary\"\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  {\r\n    console.log(weatherData);\r\n  }\r\n  {\r\n    console.log(wpdata);\r\n  }\r\n  {\r\n    console.log(pageNumber);\r\n  }\r\n\r\n  //renders list only if data is present\r\n  if (weatherData.length > 0 && wpdata.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(wpdata[pageNumber - 1]).map(listData)}\r\n        {wpdata.map(paginationButton)}\r\n      </div>\r\n    );\r\n  }\r\n  //if data is not present show alert\r\n  else {\r\n    return (\r\n      <div className=\"alert-danger\">\r\n        <mark>City you entered can't be found!!</mark>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n/*\r\n//import axios from 'axios'\r\nimport { useState, useEffect } from \"react\";\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\n\r\nimport { PanelGroup, Panel } from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Alert, Pagination } from \"react-bootstrap\";\r\n\r\nvar daylist = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday \",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nfunction SearchListComponent(props) {\r\n  const [wdata, setWdata] = useState([]);\r\n  const [pageDate, setpageDate] = useState([]);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const [currentDate, setCurrentDate] = useState(\"\");\r\n  const pageSize = 3;\r\n\r\n  const { updateSearchId } = useParams(); //use useParams() to get the param from url, const {updateSearchId} is required\r\n\r\n  function paginate(res, page_size, max_page_size) {\r\n    page_size = page_size || 10;\r\n    max_page_size = max_page_size || 100;\r\n    page_size = page_size > max_page_size ? max_page_size : page_size;\r\n    var pages = Math.ceil(res.length / page_size),\r\n      items = [];\r\n    for (var p = 1; p <= pages; p++) {\r\n      var start = Math.ceil(page_size * (p - 1));\r\n      items.push(res.slice(start, start + page_size));\r\n    }\r\n    return items;\r\n  }\r\n\r\n  useEffect(() => {\r\n    var current = new Date();\r\n\r\n    var dataStr = \"\";\r\n    dataStr =\r\n      \"Date: \" +\r\n      current.getFullYear() +\r\n      \"-\" +\r\n      current.getMonth() +\r\n      \"-\" +\r\n      current.getDate() +\r\n      \", Time: \" +\r\n      current.getHours() +\r\n      \":\" +\r\n      current.getMinutes();\r\n    setCurrentDate(dataStr);\r\n    function getWeather(cityId) {\r\n      return new Promise((resolve, reject) => {\r\n        var req =\r\n          \"http://api.openweathermap.org/data/2.5/find?q=\" +\r\n          cityId +\r\n          \"&cnt=50&units=metric&appid=b78cb80900695397a1f53c9d41103ea1\";\r\n\r\n        fetch(req)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            resolve(data);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error:\", error);\r\n            reject();\r\n          });\r\n      });\r\n    }\r\n\r\n    var userStr = updateSearchId.replace(/\\s/g, \"&nbsp;\").toUpperCase();\r\n    var strComma = userStr.substr(userStr.length - 3, 1);\r\n    var url = userStr.split(\",\");\r\n    //   getData(url[0]);\r\n    getWeather(url[0])\r\n      .then((data) => {\r\n        // console.log(data);\r\n        var tempArray = [];\r\n        if (strComma == \",\") {\r\n          var countryCode = url[1];\r\n          for (var i = 0; i < data.list.length; i++) {\r\n            if (data.list[i].sys.country == countryCode) {\r\n              tempArray.push(data.list[i]);\r\n\r\n              setWdata(tempArray);\r\n              setpageDate(paginate(tempArray, 3, 3));\r\n              setTotalPages(tempArray.length / pageSize + 1);\r\n            }\r\n          }\r\n        } else {\r\n          setWdata(data.list);\r\n\r\n          setpageDate(paginate(data.list, 3, 3));\r\n          setTotalPages(data.list.length / pageSize + 1);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [updateSearchId]);\r\n\r\n  const accordian = (weahterRecord, index) => {\r\n    console.log(weahterRecord);\r\n    return (\r\n      <div>\r\n        <PanelGroup\r\n          accordion\r\n          id=\"accordion-uncontrolled-example\"\r\n          defaultActiveKey=\"2\"\r\n        >\r\n          <Panel\r\n            onClick={(e) => props.addRecentlyViewed(weahterRecord)}\r\n            eventKey={weahterRecord}\r\n          >\r\n            <Panel.Heading>\r\n              <Panel.Title toggle>\r\n                <div>\r\n                  <img\r\n                    src={`http://openweathermap.org/images/flags/${weahterRecord.sys.country.toLowerCase()}.png`}\r\n                  />\r\n                  <span> </span>\r\n                  <span>\r\n                    {weahterRecord.name}, {weahterRecord.sys.country}\r\n                  </span>\r\n                  <p>\r\n                    feels like - {weahterRecord.main.feels_like},{\" \"}\r\n                    {weahterRecord.weather[0].description}\r\n                  </p>\r\n                  <span>\r\n                    <img\r\n                      src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                    />\r\n                    {weahterRecord.main.temp}&deg;C\r\n                  </span>\r\n                </div>\r\n              </Panel.Title>\r\n            </Panel.Heading>\r\n            <Panel.Body collapsible>\r\n              <div id=\"background\">\r\n                <section id=\"itroBackground\" className=\"intro\">\r\n                  <div className=\"inner\">\r\n                    <div className=\"content\">\r\n                      <div className=\"weather-app\">\r\n                        <div className=\"left\">\r\n                          <div\r\n                            id=\"toggleCelsius\"\r\n                            className=\"temperature-celsius\"\r\n                          >\r\n                            <span id=\"temperatureCelsius\">\r\n                              {weahterRecord.main.temp}&deg;C\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"location\">\r\n                            <span id=\"loc\">\r\n                              {weahterRecord.name}, {weahterRecord.sys.country}\r\n                            </span>\r\n                          </div>\r\n                          <br />\r\n                          <div className=\"day\">\r\n                            <span id=\"date\">{currentDate}</span>\r\n                          </div>\r\n                          <div className=\"day\">\r\n                            <span id=\"weekday\">\r\n                              {daylist[new Date().getDay()]}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"right\">\r\n                          <div className=\"top\">\r\n                            <img\r\n                              id=\"icon\"\r\n                              width=\"75px\"\r\n                              src={`http://openweathermap.org/img/wn/${weahterRecord.weather[0].icon}@2x.png`}\r\n                            />\r\n                            <p id=\"description\"></p>\r\n                          </div>\r\n                          <div className=\"bottom\">\r\n                            <div className=\"humidity\">\r\n                              <span>\r\n                                Humidity:\r\n                                <span id=\"humidity\">\r\n                                  {weahterRecord.main.humidity}\r\n                                </span>\r\n                                %\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Wind:{\" \"}\r\n                                <span id=\"wind\">\r\n                                  {weahterRecord.wind.speed}\r\n                                </span>{\" \"}\r\n                                m/s\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"wind\">\r\n                              <span>\r\n                                Min:{\" \"}\r\n                                <span id=\"mintemp\">\r\n                                  {weahterRecord.main.temp_min}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>{\" \"}\r\n                              /{\" \"}\r\n                              <span>\r\n                                Max:{\" \"}\r\n                                <span id=\"mmaxtemp\">\r\n                                  {weahterRecord.main.temp_max}\r\n                                </span>{\" \"}\r\n                                &deg;C\r\n                              </span>\r\n                            </div>\r\n                            <div className=\"Geo\">\r\n                              <span>\r\n                                Geo Location:{\" \"}\r\n                                <span id=\"GeoLoc\">\r\n                                  {weahterRecord.coord.lat} ,{\" \"}\r\n                                  {weahterRecord.coord.lon}\r\n                                </span>\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </section>\r\n              </div>\r\n            </Panel.Body>\r\n          </Panel>\r\n        </PanelGroup>\r\n      </div>\r\n    );\r\n  };\r\n  const pageButton = (p, index) => {\r\n    return (\r\n      <Button\r\n        active={index + 1 === pageNumber}\r\n        onClick={(e) => {\r\n          setPageNumber(index + 1);\r\n        }}\r\n      >\r\n        {index + 1}{\" \"}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  if (wdata.length > 0 && pageDate.length > 0) {\r\n    return (\r\n      <div>\r\n        {Array.from(pageDate[pageNumber - 1]).map(accordian)}\r\n        {pageDate.map(pageButton)}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <div>API Failed</div>;\r\n  }\r\n}\r\n\r\nexport default SearchListComponent;\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}